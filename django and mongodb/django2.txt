2019.12.31
 django는 view를 URL로부터 얻기 위해 'URLconfs'라고 부르는 것을
사용한다. URLconf는 URL패턴을 views에 연결한다.

 ("you're looking at question %s." %question_id)

만들 것은
1. 질문 색인 페이지 - 최근의 질문 표시
2. 질문 세부 페이지 - 질문 내용과, 투표할 수 있는 서식 표시
3. 질문 결과 페이지 - 특정 질문에 대한 결과를 표시
4. 투표 기능 - 특정 질문에 대해 특정 선택을 할 수 있는 투표 기능을
	      제공

 view를 추가하여
def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)

def results(request, question_id):
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)

def vote(request, question_id):
    return HttpResponse("You're voting on question %s." % question_id)

 세부, 결과, 투표 기능을 만든다.
 이 기능을 사용가능하게 만들기 위해 URL패턴을 수정한다.
 route에 정수형은 '<int:question_id>' 로 표현한다.
 url은 이것이 표현할 view method를 적는다.
  :question_id 는 일치되는 패턴을 구별하기 위해 정의한 이름.
  int: 부분은 어느 패턴이 해당 URL 경로에 일치되어야 하는지를 결정하는
 컨버터이다.
 django는 URL에 html을 붙일 필요가 없다. 필요하면 붙일 수 있다.
 ex) path('polls/latest.html', view.index),
  view는 HttpResponse 객체를 반환하거나, Http404같은 예외를 발생시키게
 해야한다. 혹은 데이터베이스를 읽거나 템플릿 시스템을 사용하거나
 PDF, XML, ZIP파일을 만들 수 있다.
  그리고 만든 것을 HttpResponse로 반환하거나 Http404를 반환.

 templates.
2019.12.31 집중이 너무 안된다. 늦었으니 내일 하자.

2020.01.02 돌아왔다. 시작.

 템플릿(tamplates)
  디자인을 하는 곳이다. 장고는 여기서 템플릿을 찾는다.
  템플릿은 tamplates 폴더 안에 앱의 이름의 디렉터리를 생성한다.
 그것으로 장고는 위치를 찾아서 사용한다. 템플릿 파일 이름은 .html의
 형식으로 사용하고, 그 내용은

{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.que
stion_text }}</a></li>
    {% endfor %}  !! 중요 { 에 %를 딱 붙여야한다. 띄우면 에러.
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}

 와 같이 사용한다.

 템플릿 폴더에 이와같이 입력했으니 index view를 업데이트 해보자.

 -----이전 것
def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    output = ', '.join([q.question_text for q in latest_question_list])
    return HttpResponse(output)

 -----바꾼 것
def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    template = loader.get_tamplate('polls/index.html')
    context = {
        'latest_question_list': latest_question_list,
    }
    return HttpResponse(template.render(context, request))

 즉, 템플릿을 사용할 때에는
 from django.template import loader 로 모듈을 임포트하고,
 template = loader.get_template('polls/index.html') 로 템플릿이 있는
 위치를 알려주고,
 template.render(context, request) 를 HttpResponse로 반환한다.
 context는 템플릿에서 쓰이는 변수명과, 파이썬의 객체를 연결하는
 dictionary 값이다.

 지름길 : render(request, '템플릿 위치', context)
  모든 view에 적용한다면, 더이상 loader와 HttpResponse를 import하지 않
 아도 된다고 한다. 1번은 request, 2번은 템플릿 이름, 3번은 context 사
 전형 객체를 선택적 인수로 받는다.

 Http404 에러 일으키기
from django.shortcuts import render
from django.http import Http404
def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, 'polls/detail.html', {'question': question})

 shortcut 사용하기 : get_object_or_404() - 위의 것을 줄임
def detail(request, question_id):
    try:
        question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/detail.html', {'question': question})

다음 것 : Template 에서 하드코딩된 URL을 제거하기

너무 복잡하니 일단 내 프로젝트를 한다.


