파이썬을 배우며 사용하는 함수를 적어두는 곳이다.(2020.2.4.)

기본
    print() 출력
    input() 입력
    값**지수 : 거듭제곱

    try:
        실행할 코드
    except 에러1:
        에러 발생시 실행할 코드
    except 에러2 as e:
        print(e) : e는 에러 메시지를 받는 변수이다.
    else:
        예외가 발생하지 않았을 때 실행할 코드
    finally:
        예외 발생 여부에 상관 없이 무조건 실행할 코드
    except는 에러이름에 해당하는 에러가 발생해야 실행된다. raise로 상위 블록으로 넘겨준다면, 받는 블록
    에는 반드시 해당 에러이름의 except가 존재해야한다. 안그러면 또 에러뜬다.


    예외 발생시키기
    raise 예외이름('에러메시지')
    예외이름은 실재로 존재하는 시름이어야 한다.

    dir(객체) : 객체의 메서드를 출력



문자열
    문자열.find(객체) : 문자열 안에 객체가 있으면 객체가 있는 인덱스를 반환하고, 없으면 -1을 반환한다.
    문자열.split('문자열') : 문자열 기준으로 분리 후 리스트로 반환
    문자열.join(리스트) : 리스트 사이에 문자열을 집어넣고 문자열로 변환
    문자열.upper : 문자열을 대문자로 변환
    문자열.lower : 소문자로 변환
    문자열.title : 공백 후의 단어의 첫글자를 대문자로 변환
    문자열1.strip(문자열2) 기본 공백 : 문자열1 양 끝에 있는 문자열2의 요소 모두를 제거.
    문자열.ljust(자연수, 문자1) : 문자열을 자연수만큼 문자1을 넣고 왼쪽으로 정렬
    문자열.rjust(자연수, 문자1) : 문자열을 자연수만큼 문자1을 넣고 오른쪽으로 정렬
    문자열.center(자연수, 문자1) : 문자열을 자연수만큼 문자1을 넣고 중간으로 정렬

    포매팅
    '{0:03d}.{1}'.format(1, 2)
    순서 :3글자의 정수이고, 왼쪽을 0으로 채움
    '{0} {1}'.format('첫번째', '두번째')
    '{one} {tow}'.format(one='첫번째', two='두번째')
    f'{변수이름} {변수이름}'
    '%d %0.2f %s %x %o' % (정수, 실수, 문자열, 16진수, 8진수)

    포매팅 정렬
    '{0:>10} {1}'.format(문자열, 문자열)
    {순서: 채울것 방향 글자수}
    {0  :G > 10}

반복형 객체
    split()

    aa = 복사할 것.copy()

    import copy
    aa = copy.deepcopy(복사할 것) : 중첩 리스트 혹은 딕셔너리 등

    max(객체) : 객체 중 제일 높은 값을 반환.
    min(객체) : 객체 중 제일 낮은 값을 반환.

    객체.index(값) 값이 있는 자리의 인덱스를 반환.



dict
    aa = {key: value for key,value in dict.fromkeys(키리스트).items() if 조건식}
    clear() : 딕셔너리의 모든 내용을 삭제하고 빈 딕셔너리로 만든다.

set
    set.union(집합1, 집합2)
    set.intersection(a, b)
    set.difference(a, b)
    set.symmetric_difference(a,b)
    집합.update(집합) ex - abc.update({1, 2, 3, 4})
    .add(추가할 요소)
    .remove(제거할 요소) : 없는 것을 제거하면 오류
    .discard(제거할 요소) : 없는 것을 제거해도 오류 x
    .pop() : 임의의 요소를 제거
    .clear() : 모든 요소를 제거
    len(집합) : 길이
    복사 결과.copy(복사할 집합)

파일 사용하기
    파일객체 = open('파일이름', '파일모드') : 파일모드 = w, r
    객체 = 파일객체.read()
    파일객체.write('문자열')
    파일객체.close()

    파일 자동으로 닫기
    with open('파일이름', '파일모드') as 파일객체:
        할 행동

    리스트에 들어있는 문자열을 파일에 쓰기
    파일객체.writelines(리스트객체)

    문자열을 리스트로 가져오기
    객체 = 파일객체.readlines()

    파이썬 객체를 파일에 저장하기, 가져오기
    import pickle
    파일객체 = open('파일이름.p', 'wb') : 확장자는 다른 것으로 해도 상관 없다. 하지만 파일 모드는
    반드시 wb로 할 것. write binary
    pickle.dump(객체, 파일객체)

    파일객체 = open('파일이름.p', 'rb')
    객체 = pickle.load(파일객체)

람다 표현식
    lambda 매개변수: 식1 if 조건식1 else 식2 fi 조건식2 else 식3
    filter(함수, 반복가능한 객체)
    from functools import reduce
    reduce(함수, 반복가능한 객체)

함수
    def 함수이름(매개변수):
        내용
        return 반환

    global 변수 : 함수 내에서 전역변수를 사용
    nonlocal 변수 : 함수1 내의 함수2에서, 함수1의 변수를 함수2에서 사용해야할 때.
    nonlocal 은 가까운 변수를 우선적으로 찾는다. 1단계 밖에서 찾고, 없으면 더 바깥으로 간다.
    '''독스트링''' >> __doc__ : 함수의 시작지점에 ''' ''' 안에 설명을 넣은 것.



클래스
    class 클래스이름:
        def __init__(self, 매개변수, *args, **kwargs):
            self.속성이름 = 값
        def 메서드이름(self, 매개변수):
            기능들
        self.__속성이름 혹은 def __메서드이름 : 비공개 >> 클래스 내에서만 호출 가능함.
        __dict__ 현재 클래스, 인스턴스의 속성을 딕셔너리 형태로 출력.
        __doc__ : 클래스나 인스턴스에도 독스트링을 넣을 수 있다.

        @staticmethod
        def 정적메서드(매개변수1, ...): 정적 메서드는 self를 받지 않는 순수 함수를 만든다.

        @classmethod
        def 클래스메서드(cls, 매개변수, ...): 클래스 메서드는 cls(클래스)를 받는다.
        클래스 속성에 접근이 가능하며, 이 안에서 인스턴스를 만들 수도 있다.

        클래스 상속
        class 상속클래스이름(기반클스이름):
            코드
        상속 관계 확인하기
        issubclass(파생, 기반)

        기반 클래스의 인스턴스 속성 사용하기
        super().__init__()

        mro(Method Resolution Order) 메서드 탐색 순서. 메서드를 찾는 순서가 나온다.

        추상 클래스
        from abc import *

        class 추상클래스이름(metaclass=ABCMeta):
        @abstractmethod
        def 메서드이름:
            pass

        네임드 튜플
        import collections
        클래스이름 - collections.namedtuple('자료형이름', ['요소이름1', '요소이름2']
        인스턴스 = 클래스(값1, 값2)
        인스턴스 = 클래스(요소이름1 = 값1, 요소이름2 = 값2)
        인스턴스.요소이름1
        인스턴스[인덱스]

이터레이터
    객체.__iter__() : 객체의 이터레이터 가져옴.
    이터레이터.__next__() : 이터레이터를 실행함.
    iter(반복가능한객체) : 반복가능한객체의 이터레이터를 반환
    next(이터레이터, 기본값) : 이터레이터를 실행하고, 예외 발생시 기본값 반환

    이터레이터 만들기
    class 이터레이터 이름:
        def __init__(self, ...):
            pass
        def __iter__(self):
            이터레이터이면서 요소를 가지고있다면 요소 반환,
            이터레이터라면 return self 하면 된다.
        def __next__(self):
            값 생성의 규칙을 정한다. 여기서 raise 를 이용하여 예외를 발생시킨다.
        def __getitem__(self, index):
            이 부분을 작성하면 인덱스를 받는 이터레이터를 만들 수 있다.
            인덱스가 범위 내에 있다면 return으로 알맞은 값은 반환시키다.
            인덱스가 범위 밖이라면 raise IndexError 를 사용한다.


기타 함수
    import math
        math.sqrt(값) : 루트. 값이 음수이면 에러.
        math.pow(값, 지수) : 값의 지수제곱
        math.fabs(값) : 절댓값을 실수로 반환

    import random
        random.randint(시작, 끝) : 시작과 끝 사이의 무작위 정수 생성성

제너레이터
    함수 안에 yield 값 을 넣으면 제너레이터가 된다.
    yield 값 은 next 를 실행했을 때 반환할 값이다.
    yield from 객체 : 객체는 반복가능한 객체, 이터레이터, 제너레이터가 들어갈 수 있다.
    yield from 객체 를 사용하면 객체 안의 요소가 하나씩 생성, 반환된다.
    제너레이터 표현식 : (i for i in range(5)) 같이, 리스트 표현식과 같다.

코루틴
    함수 안에서
        변수1 = (yield 변수2) : 변수2를 반환하고 밖에서 받은 값을 변수 1에 할당
        상위 코루틴에서
        변수1 = (yield from 하위코루틴()) : 하위 코루틴에서 return을 만날 때까지 하위
        코루틴에 값을 모두 전달, 실행은 하위만. return을 만나면 그제서야 상위 코루틴을 실행.

    함수 바깥에서
        코루틴객체 = 코루틴()
        최초 실행 : next(코루틴객체), 코루틴객체.__next__(), 코루틴객체.send(None)
        코루틴객체.send(값) : 코루틴에 값 보내기
        코루틴객체.close() : 코루틴 종료. GeneratorExit 예외 발생.
        코루틴객체.throw(예외이름, '에러메시지') : 코루틴 안에 예외를 발생시키고 만약 yield가 코
                                                루틴 안에 있다면 값을 반환받음.

데코레이터
    매개변수가 없는 데코레이터
        def 데코레이터(func):  데코레이팅 할 함수를 받음.
            def wrapper(매개변수):  이 함수의 형식으로 받은 함수를 데코레이트.
                추가할 코드
                result = func(매개변수)
                추가할 코드
                return result  : 대충 반환할 것을 반환하면 된다.
            return wrapper   장식이 끝난 함수를 반환.

    매개변수가 있는 데코레이터
    매개변수가 있는 데코레이터는 바깥에 함수를 하나 더 만든다.
        def 바깥데코(매개변수1):
            def 안쪽데코(func):
                def wrapper(매개변수2):
                    추가할 코드
                    res = func(매개변수2)
                    매개변수1을 이용한 코드
                    추가할 코드
                    return res 대충 결과
                return wrapper
            return 안쪽데코

    데코레이터 사용하기
    만들고자 하는 함수나 메서드 위에 @데코레이터이름 의 형식을 사용.
    클래스의 메서드에 사용할 데코레이터를 만들 때에는
    def wrapper(self, *args): 처럼 self를 반드시 넣어주자.

    여러개의 데코레이터를 사용하여 원래 함수의 이름이 안나올 때
        import functools

        wrapper 위에 @functools.wraps(func)를 사용하자.

        def deco(func):
            @functools.wraps(func)
            def wrapper(*args):
                코드
                return 대충 반환
            return wrapper

    클래스로 데코레이터 만들기
    1. 매개변수가 없는 데코레이터
        class 데코레이터:
            def __init__(self, func):
                self.func = func  : 함수를 받아 속성으로 저장한다.

            def __call__(self, *args):
                기존의 데코레이터와 같은 코드들
                return 반환할 결과

                # return wrapper 같은 것은 쓰지 않아도 된다. 사용도 @데코레이터
    2. 매개변수가 있는 데코레이터
        class 데코레이터:
            def __init__(self, 매개변수):
                self.매개변수 = 매개변수

            def __call__(self, func):  __call__ 에서 호출할 함수를 받는다.
                def wrapper(*args):
                    기존 데코레이터
                    return 반환할 결과
                return wrapper  : 클래스 데코레이터도 마찬가지로 하나의 함수를 더 넣는다.
                그리고 그 만든 함수를 반환한다.