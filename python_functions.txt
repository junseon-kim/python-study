파이썬을 배우며 사용하는 함수를 적어두는 곳이다.(2020.2.4.)

기본
    print() 출력
    input() 입력
    값**지수 : 거듭제곱

문자열
    문자열.find(객체) : 문자열 안에 객체가 있으면 객체가 있는 인덱스를 반환하고, 없으면 -1을 반환한다.
    문자열.split('문자열') : 문자열 기준으로 분리 후 리스트로 반환
    문자열.join(리스트) : 리스트 사이에 문자열을 집어넣고 문자열로 변환
    문자열.upper : 문자열을 대문자로 변환
    문자열.lower : 소문자로 변환
    문자열.title : 공백 후의 단어의 첫글자를 대문자로 변환
    문자열1.strip(문자열2) 기본 공백 : 문자열1 양 끝에 있는 문자열2의 요소 모두를 제거.
    문자열.ljust(자연수, 문자1) : 문자열을 자연수만큼 문자1을 넣고 왼쪽으로 정렬
    문자열.rjust(자연수, 문자1) : 문자열을 자연수만큼 문자1을 넣고 오른쪽으로 정렬
    문자열.center(자연수, 문자1) : 문자열을 자연수만큼 문자1을 넣고 중간으로 정렬

    포매팅
    '{0:03d}.{1}'.format(1, 2)
    순서 :3글자의 정수이고, 왼쪽을 0으로 채움
    '{0} {1}'.format('첫번째', '두번째')
    '{one} {tow}'.format(one='첫번째', two='두번째')
    f'{변수이름} {변수이름}'
    '%d %0.2f %s %x %o' % (정수, 실수, 문자열, 16진수, 8진수)

    포매팅 정렬
    '{0:>10} {1}'.format(문자열, 문자열)
    {순서: 채울것 방향 글자수}
    {0  :G > 10}

반복형 객체
    split()

    aa = 복사할 것.copy()

    import copy
    aa = copy.deepcopy(복사할 것) : 중첩 리스트 혹은 딕셔너리 등

    max(객체) : 객체 중 제일 높은 값을 반환.
    min(객체) : 객체 중 제일 낮은 값을 반환.

    객체.index(값) 값이 있는 자리의 인덱스를 반환.



dict
    aa = {key: value for key,value in dict.fromkeys(키리스트).items() if 조건식}
    clear() : 딕셔너리의 모든 내용을 삭제하고 빈 딕셔너리로 만든다.

set
    set.union(집합1, 집합2)
    set.intersection(a, b)
    set.difference(a, b)
    set.symmetric_difference(a,b)
    집합.update(집합) ex - abc.update({1, 2, 3, 4})
    .add(추가할 요소)
    .remove(제거할 요소) : 없는 것을 제거하면 오류
    .discard(제거할 요소) : 없는 것을 제거해도 오류 x
    .pop() : 임의의 요소를 제거
    .clear() : 모든 요소를 제거
    len(집합) : 길이
    복사 결과.copy(복사할 집합)

파일 사용하기
    파일객체 = open('파일이름', '파일모드') : 파일모드 = w, r
    객체 = 파일객체.read()
    파일객체.write('문자열')
    파일객체.close()

    파일 자동으로 닫기
    with open('파일이름', '파일모드') as 파일객체:
        할 행동

    리스트에 들어있는 문자열을 파일에 쓰기
    파일객체.writelines(리스트객체)

    문자열을 리스트로 가져오기
    객체 = 파일객체.readlines()

    파이썬 객체를 파일에 저장하기, 가져오기
    import pickle
    파일객체 = open('파일이름.p', 'wb') : 확장자는 다른 것으로 해도 상관 없다. 하지만 파일 모드는
    반드시 wb로 할 것. write binary
    pickle.dump(객체, 파일객체)

    파일객체 = open('파일이름.p', 'rb')
    객체 = pickle.load(파일객체)

람다 표현식
    lambda 매개변수: 식1 if 조건식1 else 식2 fi 조건식2 else 식3
    filter(함수, 반복가능한 객체)
    from functools import reduce
    reduce(함수, 반복가능한 객체)

함수
    def 함수이름(매개변수):
        내용
        return 반환

    global 변수 : 함수 내에서 전역변수를 사용
    nonlocal 변수 : 함수1 내의 함수2에서, 함수1의 변수를 함수2에서 사용해야할 때.
    nonlocal 은 가까운 변수를 우선적으로 찾는다. 1단계 밖에서 찾고, 없으면 더 바깥으로 간다.
    '''독스트링''' >> __doc__ : 함수의 시작지점에 ''' ''' 안에 설명을 넣은 것.



클래스
    class 클래스이름:
        def __init__(self, 매개변수, *args, **kwargs):
            self.속성이름 = 값
        def 메서드이름(self, 매개변수):
            기능들
        self.__속성이름 혹은 def __메서드이름 : 비공개 >> 클래스 내에서만 호출 가능함.
        __dict__ 현재 클래스, 인스턴스의 속성을 딕셔너리 형태로 출력.
        __doc__ : 클래스나 인스턴스에도 독스트링을 넣을 수 있다.

        @staticmethod
        def 정적메서드(매개변수1, ...): 정적 메서드는 self를 받지 않는 순수 함수를 만든다.

        @classmethod
        def 클래스메서드(cls, 매개변수, ...): 클래스 메서드는 cls(클래스)를 받는다.
        클래스 속성에 접근이 가능하며, 이 안에서 인스턴스를 만들 수도 있다.

        클래스 상속
        class 상속클래스이름(기반클스이름):
            코드
        상속 관계 확인하기
        issubclass(파생, 기반)

        기반 클래스의 인스턴스 속성 사용하기
        super().__init__()

        mro(Method Resolution Order) 메서드 탐색 순서. 메서드를 찾는 순서가 나온다.

        추상 클래스
        from abc import *

        class 추상클래스이름(metaclass=ABCMeta):
        @abstractmethod
        def 메서드이름:
            pass

        네임드 튜플
        import collections
        클래스이름 - collections.namedtuple('자료형이름', ['요소이름1', '요소이름2']
        인스턴스 = 클래스(값1, 값2)
        인스턴스 = 클래스(요소이름1 = 값1, 요소이름2 = 값2)
        인스턴스.요소이름1
        인스턴스[인덱스]




    기타 함수
        import math
            math.sqrt(값) : 루트. 값이 음수이면 에러.
            math.pow(값, 지수) : 값의 지수제곱
            math.fabs(값) : 절댓값을 실수로 반환


